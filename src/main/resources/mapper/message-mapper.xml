<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wymx.springboot.dao.MessageMapper">

    <sql id="selectFields">
        id,from_id,to_id,conversation_id,content,status,create_time
    </sql>
    <sql id="insertFields">
        from_id,to_id,conversation_id,content,status,create_time
    </sql>
    <!--新增消息-->
    <insert id="insertMessage" parameterType="com.wymx.springboot.entity.Message">
        insert into message (<include refid="insertFields"></include>)
        values (#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>
    <!--修改消息的状态-->
    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>
    <!--查询当前用户的会话列表，针对当前用户只返回最新的消息-->
    <select id="selectConversations" resultType="com.wymx.springboot.entity.Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset},#{limit}
    </select>
    <!--查询当前用户的会话数量-->
    <select id="selectConversationCount" resultType="java.lang.Integer" parameterType="int">
        select count(m.maxid) from (
            select max(id) as maxid from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
                                    ) as m
    </select>
    <!--查询某个会话的私信列表-->
    <select id="selectLetters" resultType="com.wymx.springboot.entity.Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset},#{limit}
    </select>
    <!--查询某个会话的私信数量-->
    <select id="selectLetterCount" resultType="java.lang.Integer" parameterType="java.lang.String">
        select count(id)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>
    <!--查询未读私信数量-->
    <select id="selectLetterUnreadCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>
    <!--查询某个主题下最新通知-->
    <select id="selectLatesNotice" resultType="com.wymx.springboot.entity.Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id = 1
            and to_id = #{userId}
            and conversation_id = #{topic}
        )
    </select>
    <!--查询某个主题下的通知数量-->
    <select id="selectNoticeCount" resultType="java.lang.Integer">
        select count(id) from message
        where status != 2
            and from_id = 1
            and to_id = #{userId}
          and conversation_id = #{topic}
    </select>
    <!--查询未读的通知数量-->
    <select id="selectNoticeUnreadCount" resultType="java.lang.Integer">
        select count(id) from message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        <if test="topic!=null">
            and conversation_id = #{topic}
        </if>
    </select>
    <!--查询某个主题的通知列表-->
    <select id="selectNotices" resultType="com.wymx.springboot.entity.Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        order by create_time desc
        limit #{offset} , #{limit}
    </select>


</mapper>